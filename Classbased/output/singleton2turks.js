"use strict";
class Singleton2 {
    // Constructor'Ä± private yaparak doÄŸrudan sÄ±nÄ±fÄ±n Ã¶rneklenmesini engelliyoruz.
    //private constructor() ifadesi, bir sÄ±nÄ±fÄ±n dÄ±ÅŸarÄ±dan Ã¶rneklenmesini 
    // (instantiation) Ã¶nlemek amacÄ±yla kullanÄ±lÄ±r. 
    // Bu Ã¶zellik, sÄ±nÄ±fÄ±n yapÄ±cÄ±sÄ±na (constructor) sadece sÄ±nÄ±fÄ±n kendi iÃ§inde eriÅŸilebileceÄŸi anlamÄ±na gelir. Yani, bir new anahtar kelimesi kullanarak bu sÄ±nÄ±fÄ±n yeni bir Ã¶rneÄŸini yaratmaya Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ±zda hata alÄ±rsÄ±nÄ±z.
    constructor() { }
    // Singleton Ã¶rneÄŸini almak iÃ§in kullanÄ±lan statik bir metod.
    static getInstance() {
        if (!Singleton2.instance) {
            Singleton2.instance = new Singleton2();
        }
        return Singleton2.instance;
    }
    sayHello() {
        console.log("Merhaba! Ben bir Singleton Ã¶rneÄŸim.");
    }
}
// Singleton Ã¶rneÄŸini kullanma
const obj1 = Singleton2.getInstance();
const obj2 = Singleton2.getInstance();
console.log(obj1 === obj2); // true: Her iki deÄŸiÅŸken de aynÄ± Ã¶rneÄŸi referans eder.
obj1.sayHello();
// bu Ã¶rnekte, Singleton.getInstance() metodu aynÄ± Ã¶rneÄŸi (instance) dÃ¶ner. EÄŸer Singleton Ã¶rneÄŸi daha Ã¶nce oluÅŸturulmamÄ±ÅŸsa, instance deÄŸiÅŸkeni null olur ve bu metot, Ã¶rneÄŸi yaratÄ±r. Aksi takdirde, mevcut olan Ã¶rneÄŸi dÃ¶ner.
//Singleton deseni, genellikle veritabanÄ± baÄŸlantÄ±larÄ±, ayar yÃ¶netimi veya kÃ¼resel durumlarÄ± yÃ¶netmek iÃ§in tercih edilir. Ancak, dikkatli kullanÄ±lmazsa kodun test edilebilirliÄŸini zorlaÅŸtÄ±rabilir. 
// Bu yÃ¼zden uygun senaryolarda kullanÄ±lmasÄ± Ã¶nemlidir. ğŸ˜Š
// TypeScript'te Singleton, bir sÄ±nÄ±ftan sadece bir Ã¶rneÄŸin (instance) 
// oluÅŸturulmasÄ±nÄ± garanti altÄ±na alan bir tasarÄ±m deseni (design pattern) olarak tanÄ±mlanÄ±r. Singleton tasarÄ±m deseni, genellikle kÃ¼resel (global) bir eriÅŸim noktasÄ± saÄŸlamak ve kaynaklarÄ± optimize etmek iÃ§in kullanÄ±lÄ±r.
